# .github/workflows/build-and-publish.yml
name: Build and Publish Flink CDC Gateway

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test Python Package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
# שלב התקנת הדרישות עם תיקונים
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest==7.3.1 pytest-cov==4.1.0 flake8==6.0.0
          
        # התקן את הדרישות מקובץ הדרישות
        if [ -f requirements.txt ]; then 
          python -m pip install -r requirements.txt
        fi
          
        # וודא שפלאסק וורקצויג מותקנים בגרסאות המתאימות
        python -m pip install flask==2.0.1 werkzeug==2.0.2 --force-reinstall
          
        # התקן את החבילה עצמה במצב פיתוח
        python -m pip install -e .
          
    - name: Verify packages
      run: |
        # בדוק את הגרסאות המותקנות (להוסיף יותר מידע)
        echo "Checking installed packages:"
        python -m pip list | grep -E 'Flask|Werkzeug' || echo "Failed to find packages"
          
        # בדוק גם באמצעות pip show שלא מסתמך על grep
        echo "Detailed package info:"
        python -m pip show flask werkzeug || echo "Failed to show package details"
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest --cov=cdc_gateway

  build-and-publish-python:
    name: Build and Publish Python Package
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Build package
      run: |
        # Update version in init file based on tag
        sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.get_version.outputs.VERSION }}\"/" cdc_gateway/__init__.py
        python -m build
        
    - name: Check package
      run: |
        python -m twine check dist/*
        
    - name: Publish to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        repository-url: https://upload.pypi.org/legacy/

  build-and-publish-docker:
    name: Build and Publish Docker Image
    needs: [test, build-and-publish-python]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/flink-cdc-gateway  # שימוש ישיר ב-Docker Hub
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=ref,event=branch
          type=sha,format=short
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [build-and-publish-python, build-and-publish-docker]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      uses: metcalfc/changelog-generator@v4.0.1
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        body: |
          ## Changes
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### PyPI
          ```
          pip install flink-cdc-gateway
          ```
          
          ### Docker
          ```
          docker pull ${{ secrets.DOCKER_USERNAME }}/flink-cdc-gateway:${{ github.ref_name }}
          ```
        artifacts: "dist/*"
        token: ${{ secrets.GITHUB_TOKEN }}