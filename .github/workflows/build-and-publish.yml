# .github/workflows/build-and-publish.yml
name: Build and Publish Flink CDC Gateway

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master ]

# הגדרות סביבה גלובליות
env:
  PYTHON_VERSION: '3.9'
  REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_NAME: flink-cdc-gateway

jobs:
  # בדיקות ואימות הקוד
  test:
    name: Test Python Package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest==7.3.1 pytest-cov==4.1.0 flake8==6.0.0
          
        # התקן את הדרישות מקובץ הדרישות
        if [ -f requirements.txt ]; then 
          python -m pip install -r requirements.txt
        fi
          
        # וודא שפלאסק וורקצויג מותקנים בגרסאות המתאימות
        python -m pip install flask==2.0.1 werkzeug==2.0.2 --force-reinstall
          
        # התקן את החבילה עצמה במצב פיתוח
        python -m pip install -e .
          
    - name: Verify packages
      run: |
        # בדוק את הגרסאות המותקנות
        echo "Checking installed packages:"
        python -m pip list | grep -E 'Flask|Werkzeug' || echo "Failed to find packages"
          
        # בדוק גם באמצעות pip show
        echo "Detailed package info:"
        python -m pip show flask werkzeug || echo "Failed to show package details"
        
    - name: Lint with flake8
      run: |
        # עצור את הבנייה אם יש שגיאות תחביר Python או שמות לא מוגדרים
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero מתייחס לכל השגיאות כאזהרות
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        # הרץ את הבדיקות עם בדיקת כיסוי
        pytest --cov=cdc_gateway

  # בניית חבילת Python
  build-python:
    name: Build Python Package
    needs: test
    runs-on: ubuntu-latest
    # בנה תמיד אחרי בדיקות מוצלחות
    
    outputs:
      version: ${{ steps.set_version.outputs.VERSION }}
      is_release: ${{ steps.set_version.outputs.IS_RELEASE }}
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set version
      id: set_version
      run: |
        # אם יש תג, השתמש בו כגרסה
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
        else
          # אחרת השתמש בגרסה + תאריך + קיצור SHA
          VERSION=$(python -c "import cdc_gateway; print(cdc_gateway.__version__)")-dev.$(date +%Y%m%d%H%M).${GITHUB_SHA::7}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        fi
        echo "Setting version to: $VERSION"
        
    - name: Update version in code
      run: |
        # עדכן את הגרסה בקוד
        sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.set_version.outputs.VERSION }}\"/" cdc_gateway/__init__.py
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        ls -la dist/
        
    - name: Check package
      run: |
        python -m twine check dist/*

    # שמור את החבילה כartefact
    - name: Store Python package
      uses: actions/upload-artifact@v2
      with:
        name: python-package
        path: dist/
        retention-days: 5

  # פרסום חבילת Python ל-PyPI (רק בשחרורים)
  publish-python:
    name: Publish Python Package to PyPI
    needs: build-python
    runs-on: ubuntu-latest
    if: needs.build-python.outputs.is_release == 'true'
    
    steps:
    - name: Download Python package
      uses: actions/download-artifact@v2
      with:
        name: python-package
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        repository-url: https://upload.pypi.org/legacy/

  # בניית ופרסום אימג' Docker
  publish-docker:
    name: Build and Publish Docker Image
    needs: [test, build-python]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # פרסם דוקר בפוש לענפים ראשיים ותגים
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=ref,event=branch
          type=sha,format=short
          type=raw,value=${{ needs.build-python.outputs.version }},enable=true
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # יצירת שחרור GitHub (רק בתגים)
  create-release:
    name: Create GitHub Release
    needs: [build-python, publish-python, publish-docker]
    runs-on: ubuntu-latest
    if: needs.build-python.outputs.is_release == 'true'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_GITHUB }}
        
    - name: Download Python package
      uses: actions/download-artifact@v2
      with:
        name: python-package
        path: dist/
        
    - name: Generate changelog
      id: changelog
      run: |
        # קבל את כל ההודעות קומיט מהתג האחרון עד לתג הנוכחי
        PREV_TAG=$(git tag --sort=-creatordate | grep "^v" | head -n 2 | tail -n 1 || echo "")
        if [ -z "$PREV_TAG" ]; then
          # אם אין תג קודם, קח את כל ההודעות קומיט
          CHANGES=$(git log --pretty=format:"- %s" -10)
        else
          # אחרת קח את ההודעות מהתג האחרון
          CHANGES=$(git log --pretty=format:"- %s" ${PREV_TAG}..HEAD)
        fi
        # שמור את ההודעות בפורמט מתאים לגיטהאב
        echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        name: "Release v${{ needs.build-python.outputs.version }}"
        body: |
          ## Flink CDC Gateway v${{ needs.build-python.outputs.version }}
          
          ### Changes
          
          ${{ steps.changelog.outputs.CHANGES }}
          
          ### Installation
          
          #### PyPI
          ```
          pip install flink-cdc-gateway
          ```
          
          #### Docker
          ```
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-python.outputs.version }}
          ```
        token: ${{ secrets.PAT_GITHUB }}
        artifacts: "dist/*"