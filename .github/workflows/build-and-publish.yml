# .github/workflows/build-and-publish.yml
name: Build and Publish Flink CDC Gateway

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test Python Package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest==7.3.1 pytest-cov==4.1.0 flake8==6.0.0
          
        # התקן את הדרישות מקובץ הדרישות
        if [ -f requirements.txt ]; then 
          python -m pip install -r requirements.txt
        fi
          
        # וודא שפלאסק וורקצויג מותקנים בגרסאות המתאימות
        python -m pip install flask==2.0.1 werkzeug==2.0.2 --force-reinstall
          
        # התקן את החבילה עצמה במצב פיתוח
        python -m pip install -e .
    
    - name: Setup test directories
      run: |
        # יצירת תיקיות נדרשות לבדיקות
        mkdir -p /tmp/pipelines
        mkdir -p /tmp/checkpoints
        mkdir -p /tmp/savepoints
        
        # הגדרת הרשאות
        chmod -R 777 /tmp/pipelines
        chmod -R 777 /tmp/checkpoints
        chmod -R 777 /tmp/savepoints
        
        # וודא שקובץ הבדיקות קיים
        if [ ! -f tests/test-config.yaml ]; then
          echo "Warning: test-config.yaml file missing! Creating empty file."
          mkdir -p tests
          touch tests/test-config.yaml
        fi
          
    - name: Verify packages
      run: |
        # בדוק את הגרסאות המותקנות (להוסיף יותר מידע)
        echo "Checking installed packages:"
        python -m pip list | grep -E 'Flask|Werkzeug' || echo "Failed to find packages"
          
        # בדוק גם באמצעות pip show שלא מסתמך על grep
        echo "Detailed package info:"
        python -m pip show flask werkzeug || echo "Failed to show package details"
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        # הרץ את הבדיקות עם הגדרת משתנה סביבה לנתיב קובץ תצורה
        export CONFIG_PATH=$PWD/tests/test-config.yaml
        pytest --cov=cdc_gateway

  publish-package:
    name: Build and Publish Python Package
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_GITHUB }}  # Using PAT for checkout
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Build package
      run: |
        # Update version in init file based on tag
        sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.get_version.outputs.VERSION }}\"/" cdc_gateway/__init__.py
        python -m build
        
    - name: Check package
      run: |
        python -m twine check dist/*
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        repository-url: https://upload.pypi.org/legacy/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Flink CDC Gateway v${{ steps.get_version.outputs.VERSION }}
          
          ### Installation
          
          #### PyPI
          ```
          pip install flink-cdc-gateway
          ```
          
          #### Docker
          ```
          docker pull ${{ secrets.DOCKER_USERNAME }}/flink-cdc-gateway:${{ steps.get_version.outputs.VERSION }}
          ```
        token: ${{ secrets.PAT_GITHUB }}  # Important: Using PAT here

  publish-docker:
    name: Build and Publish Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_GITHUB }}  # Using PAT for checkout
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/flink-cdc-gateway
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=short
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}